spring:
  cloud:
    stream:
      function:
        bindings:
          proxy-out-0: output
          proxy-out-1: outputlate
      default-binder: kafka
      kafka:
        binder:
          brokers: 'localhost:9094'
        # bindings:
        #   proxy-in-0:
        #     consumer:
        #       configuration:
        #         value.deserializer: io.confluent.kafka.streams.serdes.avro.GenericAvroDeserializer
        #         schema.registry.url: http://localhost:8081
        #         specific.avro.reader: false      
          # proxy-out-0:
          #   producer:
          #     configuration:
          #       value.serializer: io.confluent.kafka.streams.serdes.avro.GenericAvroSerializer
          #       schema.registry.url: http://localhost:8081
      bindings:
        proxy-in-0:
          destination: data-in
          # binder: kafka
          consumer:
            useNativeDecoding: true          
        proxy-out-0:
          destination: data-out
          binder: kafka
          producer:
            useNativeEncoding: true
          # binder: rabbit
        proxy-out-1:
          destination: data-out-late
          binder: kafka
          producer:
            useNativeEncoding: true

    function:
      definition: proxy
      grpc:
        #port: 50051
        port: 55554
        server: false

management:
  endpoint:
    health:
      show-details: ALWAYS
  endpoints:
    web:
      exposure:
        include: "*"

# spel:
#   function:
#     expression: "new java.lang.String(payload).toUpperCase()"
scw:
  processor:
    input:
      schemaRegistryUri: http://localhost:8081
      timestampExpression: "score_time"
    # output:
    #   headers:
    #     score: "$.score"
    #     user: "payload.user"
    window: 3s
    idleWindowTimeout: 30s
    maxOutOfOrderness: 500ms
    # allowedLateness: 10h
    # Enable or disable TWA aggregation. When disabled (skipAggregation = true) the input messages are processed element-wise.
    skipAggregation: false
    # When the UDF is disabled (skipUdf = true) the computed aggregate (skipAggregation = false) or the input message are send downstream. 
    # The watermarks headers are allways propagated. 
    skipUdf: true
    # forceGrpcPayloadCollection: true
    # lateEventMode: SIDE_CHANNEL
    stateType:  ROCKSDB
    rocksDbPath: "./rocksdb-data/"
    