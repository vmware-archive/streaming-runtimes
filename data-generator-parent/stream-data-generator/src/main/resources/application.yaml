stream:
  data:
    generator:
      terminateAfter: 300s

      kafkaServer: 'localhost:9094'
      schemaRegistryServer: 'http://localhost:8081'
      streams:
        - streamName: kafka-stream-songs
          valueFormat: AVRO_SCHEMA_REGISTRY
          avroSchema: |-
            {
             "namespace": "com.tanzu.streaming.runtime.playsongs.avro",
             "type": "record",
             "name": "Song",
             "doc": "unique_on=song_id;to_share=song_id",
             "fields": [
                 {"name": "song_id", "type": "long",   "doc" : "#{number.number_between '1','1000'}"},
                 {"name": "album",   "type": "string", "doc" : "#{ancient.hero} #{ancient.god}"},
                 {"name": "artist",  "type": "string", "doc" : "#{artist.names}"},
                 {"name": "name",    "type": "string", "doc" : "#{rock_band.name}"},
                 {"name": "genre",   "type": "string", "doc" : "#{music.genres}"}
             ]
            }
          valueFormat: AVRO_SCHEMA_REGISTRY
          batch:
            size: 100
            initialDelay: 1ms
            messageDelay: 10ms
            # The batch delay is not set defaulting to never rescheduling record batches for this topic. E.g. run once and stop.

        - streamName: kafka-stream-playevents
          avroSchema: |-
            {
             "namespace": "com.tanzu.streaming.runtime.playsongs.avro",
             "type": "record",
             "name": "PlayEvent",
             "fields": [
               {"name": "song_id",  "type": "long", "doc":"[[#shared.field('song.song_id')]]" },
               {"name": "duration", "type": "long", "doc":"#{number.number_between '30000','1000000'}" }
             ]
            }
          valueFormat: JSON
#          valueFormat: AVRO_SCHEMA_REGISTRY
          batch:
            size: 1
            initialDelay: 10ms
            delay: 100ms
            messageDelay: 100ms

server:
  shutdown: graceful
spring:
  lifecycle:
    timeout-per-shutdown-phase: "10s"