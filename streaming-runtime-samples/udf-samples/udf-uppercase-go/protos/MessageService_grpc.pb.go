// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: protos/MessageService.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessagingServiceClient is the client API for MessagingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagingServiceClient interface {
	BiStream(ctx context.Context, opts ...grpc.CallOption) (MessagingService_BiStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (MessagingService_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *GrpcMessage, opts ...grpc.CallOption) (MessagingService_ServerStreamClient, error)
	RequestReply(ctx context.Context, in *GrpcMessage, opts ...grpc.CallOption) (*GrpcMessage, error)
}

type messagingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingServiceClient(cc grpc.ClientConnInterface) MessagingServiceClient {
	return &messagingServiceClient{cc}
}

func (c *messagingServiceClient) BiStream(ctx context.Context, opts ...grpc.CallOption) (MessagingService_BiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[0], "/org.springframework.cloud.function.grpc.MessagingService/biStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceBiStreamClient{stream}
	return x, nil
}

type MessagingService_BiStreamClient interface {
	Send(*GrpcMessage) error
	Recv() (*GrpcMessage, error)
	grpc.ClientStream
}

type messagingServiceBiStreamClient struct {
	grpc.ClientStream
}

func (x *messagingServiceBiStreamClient) Send(m *GrpcMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagingServiceBiStreamClient) Recv() (*GrpcMessage, error) {
	m := new(GrpcMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (MessagingService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[1], "/org.springframework.cloud.function.grpc.MessagingService/clientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceClientStreamClient{stream}
	return x, nil
}

type MessagingService_ClientStreamClient interface {
	Send(*GrpcMessage) error
	CloseAndRecv() (*GrpcMessage, error)
	grpc.ClientStream
}

type messagingServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *messagingServiceClientStreamClient) Send(m *GrpcMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagingServiceClientStreamClient) CloseAndRecv() (*GrpcMessage, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GrpcMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingServiceClient) ServerStream(ctx context.Context, in *GrpcMessage, opts ...grpc.CallOption) (MessagingService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[2], "/org.springframework.cloud.function.grpc.MessagingService/serverStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagingService_ServerStreamClient interface {
	Recv() (*GrpcMessage, error)
	grpc.ClientStream
}

type messagingServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *messagingServiceServerStreamClient) Recv() (*GrpcMessage, error) {
	m := new(GrpcMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingServiceClient) RequestReply(ctx context.Context, in *GrpcMessage, opts ...grpc.CallOption) (*GrpcMessage, error) {
	out := new(GrpcMessage)
	err := c.cc.Invoke(ctx, "/org.springframework.cloud.function.grpc.MessagingService/requestReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingServiceServer is the server API for MessagingService service.
// All implementations must embed UnimplementedMessagingServiceServer
// for forward compatibility
type MessagingServiceServer interface {
	BiStream(MessagingService_BiStreamServer) error
	ClientStream(MessagingService_ClientStreamServer) error
	ServerStream(*GrpcMessage, MessagingService_ServerStreamServer) error
	RequestReply(context.Context, *GrpcMessage) (*GrpcMessage, error)
	mustEmbedUnimplementedMessagingServiceServer()
}

// UnimplementedMessagingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessagingServiceServer struct {
}

func (UnimplementedMessagingServiceServer) BiStream(MessagingService_BiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BiStream not implemented")
}
func (UnimplementedMessagingServiceServer) ClientStream(MessagingService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedMessagingServiceServer) ServerStream(*GrpcMessage, MessagingService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedMessagingServiceServer) RequestReply(context.Context, *GrpcMessage) (*GrpcMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestReply not implemented")
}
func (UnimplementedMessagingServiceServer) mustEmbedUnimplementedMessagingServiceServer() {}

// UnsafeMessagingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagingServiceServer will
// result in compilation errors.
type UnsafeMessagingServiceServer interface {
	mustEmbedUnimplementedMessagingServiceServer()
}

func RegisterMessagingServiceServer(s grpc.ServiceRegistrar, srv MessagingServiceServer) {
	s.RegisterService(&MessagingService_ServiceDesc, srv)
}

func _MessagingService_BiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagingServiceServer).BiStream(&messagingServiceBiStreamServer{stream})
}

type MessagingService_BiStreamServer interface {
	Send(*GrpcMessage) error
	Recv() (*GrpcMessage, error)
	grpc.ServerStream
}

type messagingServiceBiStreamServer struct {
	grpc.ServerStream
}

func (x *messagingServiceBiStreamServer) Send(m *GrpcMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagingServiceBiStreamServer) Recv() (*GrpcMessage, error) {
	m := new(GrpcMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessagingService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagingServiceServer).ClientStream(&messagingServiceClientStreamServer{stream})
}

type MessagingService_ClientStreamServer interface {
	SendAndClose(*GrpcMessage) error
	Recv() (*GrpcMessage, error)
	grpc.ServerStream
}

type messagingServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *messagingServiceClientStreamServer) SendAndClose(m *GrpcMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagingServiceClientStreamServer) Recv() (*GrpcMessage, error) {
	m := new(GrpcMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessagingService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GrpcMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServiceServer).ServerStream(m, &messagingServiceServerStreamServer{stream})
}

type MessagingService_ServerStreamServer interface {
	Send(*GrpcMessage) error
	grpc.ServerStream
}

type messagingServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *messagingServiceServerStreamServer) Send(m *GrpcMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagingService_RequestReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).RequestReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.springframework.cloud.function.grpc.MessagingService/requestReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).RequestReply(ctx, req.(*GrpcMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// MessagingService_ServiceDesc is the grpc.ServiceDesc for MessagingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessagingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.springframework.cloud.function.grpc.MessagingService",
	HandlerType: (*MessagingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "requestReply",
			Handler:    _MessagingService_RequestReply_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "biStream",
			Handler:       _MessagingService_BiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "clientStream",
			Handler:       _MessagingService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "serverStream",
			Handler:       _MessagingService_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/MessageService.proto",
}
