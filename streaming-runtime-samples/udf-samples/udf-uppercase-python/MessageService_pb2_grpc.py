# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import MessageService_pb2 as MessageService__pb2


class MessagingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.biStream = channel.stream_stream(
                '/org.springframework.cloud.function.grpc.MessagingService/biStream',
                request_serializer=MessageService__pb2.GrpcMessage.SerializeToString,
                response_deserializer=MessageService__pb2.GrpcMessage.FromString,
                )
        self.clientStream = channel.stream_unary(
                '/org.springframework.cloud.function.grpc.MessagingService/clientStream',
                request_serializer=MessageService__pb2.GrpcMessage.SerializeToString,
                response_deserializer=MessageService__pb2.GrpcMessage.FromString,
                )
        self.serverStream = channel.unary_stream(
                '/org.springframework.cloud.function.grpc.MessagingService/serverStream',
                request_serializer=MessageService__pb2.GrpcMessage.SerializeToString,
                response_deserializer=MessageService__pb2.GrpcMessage.FromString,
                )
        self.requestReply = channel.unary_unary(
                '/org.springframework.cloud.function.grpc.MessagingService/requestReply',
                request_serializer=MessageService__pb2.GrpcMessage.SerializeToString,
                response_deserializer=MessageService__pb2.GrpcMessage.FromString,
                )


class MessagingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def biStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def clientStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def serverStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def requestReply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessagingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'biStream': grpc.stream_stream_rpc_method_handler(
                    servicer.biStream,
                    request_deserializer=MessageService__pb2.GrpcMessage.FromString,
                    response_serializer=MessageService__pb2.GrpcMessage.SerializeToString,
            ),
            'clientStream': grpc.stream_unary_rpc_method_handler(
                    servicer.clientStream,
                    request_deserializer=MessageService__pb2.GrpcMessage.FromString,
                    response_serializer=MessageService__pb2.GrpcMessage.SerializeToString,
            ),
            'serverStream': grpc.unary_stream_rpc_method_handler(
                    servicer.serverStream,
                    request_deserializer=MessageService__pb2.GrpcMessage.FromString,
                    response_serializer=MessageService__pb2.GrpcMessage.SerializeToString,
            ),
            'requestReply': grpc.unary_unary_rpc_method_handler(
                    servicer.requestReply,
                    request_deserializer=MessageService__pb2.GrpcMessage.FromString,
                    response_serializer=MessageService__pb2.GrpcMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.springframework.cloud.function.grpc.MessagingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessagingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def biStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/org.springframework.cloud.function.grpc.MessagingService/biStream',
            MessageService__pb2.GrpcMessage.SerializeToString,
            MessageService__pb2.GrpcMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def clientStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/org.springframework.cloud.function.grpc.MessagingService/clientStream',
            MessageService__pb2.GrpcMessage.SerializeToString,
            MessageService__pb2.GrpcMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def serverStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/org.springframework.cloud.function.grpc.MessagingService/serverStream',
            MessageService__pb2.GrpcMessage.SerializeToString,
            MessageService__pb2.GrpcMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def requestReply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.springframework.cloud.function.grpc.MessagingService/requestReply',
            MessageService__pb2.GrpcMessage.SerializeToString,
            MessageService__pb2.GrpcMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
