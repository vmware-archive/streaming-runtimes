apiVersion: v1
kind: Service
metadata:
  name: clickstream-data-generator
  labels:
    app: clickstream-data-generator
    component: clickstream-data-generator
    type: streaming-spike
    spring-deployment-id: clickstream-data-generator
spec:
  type: LoadBalancer
  ports:
    - port: 80
      name: clickstream-data-generator
      targetPort: 8080
      protocol: TCP
  selector:
    app: clickstream-data-generator
    component: clickstream-data-generator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clickstream-data-generator
  labels:
    app: clickstream-data-generator
    type: streaming-spike
    component: clickstream-data-generator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: clickstream-data-generator
  template:
    metadata:
      labels:
        app: clickstream-data-generator
        component: clickstream-data-generator
    spec:
      terminationGracePeriodSeconds: 15
      containers:
        - name: clickstream-data-generator
          image: ghcr.io/logaritex/stream-data-generator:latest
          env:
          - name: KAFKA_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          volumeMounts:
            - name: config
              mountPath: /config
          ports:
            - containerPort: 8080
      volumes:
      - configMap:
          items:
          - key: application.yaml
            path: application.yaml
          name: data-generator-configmap
        name: config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: data-generator-configmap
data:
  application.yaml: |-
    stream:
      data:
        generator:
          terminateAfter: 200h

          streams:
            - streamName: kafka-stream-user
              destination:
                type: STREAM
                name: kafka-stream-user
              valueFormat: AVRO
              avroSchema: |-
                {
                  "namespace": "com.tanzu.streaming.runtime.clickstream.etl",
                  "type": "record",
                  "name": "User",
                  "doc": "to_share=user_id",
                  "fields": [
                    {
                      "name": "user_id",
                      "type": "string",
                      "doc": "#{id_number.valid}"
                    },
                    {
                      "name": "name",
                      "type": "string",
                      "doc": "#{name.fullName}"
                    },
                    {
                      "name": "level",
                      "type": "string",
                      "doc": "#{options.option 'BRONZE','SILVER','GOLD','PLATINUM'}"
                    }
                  ]
                }

              batch:
                size: 100
                initialDelay: 100ms
                messageDelay: 100ms

            - streamName: kafka-stream-click
              destination:
                type: STREAM
                name: kafka-stream-click
              valueFormat: AVRO
              avroSchema: |-
                namespace: com.tanzu.streaming.runtime.clickstream.etl
                type: record
                name: Click
                fields:
                  - name: user_id
                    type: string
                    doc: "[[#shared.field('user.user_id')]]"
                  - name: page
                    type: int
                    doc: "#{number.number_between '1','100000'}"
                  - name: action
                    type: string
                    doc: "#{options.option 'vitrine_nav','checkout','product_detail','products','selection','cart'}"
                  - name: device
                    type: string
                    doc: "#{options.option 'mobile','computer','tablet'}"
                  - name: agent
                    type: string
                    doc: "#{internet.userAgentAny}"

              batch:
                size: 1
                initialDelay: 100ms
                delay: 500ms
                messageDelay: 100ms

    server:
      shutdown: graceful

    spring:  
      lifecycle:
        timeout-per-shutdown-phase: "100m"

      cloud:  
        stream:           
          default-binder: kafka
          bindings:
            kafka-stream-user:
              binder: kafka1
              destination: kafka-stream-user
              contentType: application/*+avro
              producer:
                useNativeEncoding: true
            
            kafka-stream-click:
              binder: kafka1
              destination: kafka-stream-click
              contentType: application/*+avro
              producer:
                useNativeEncoding: true
            
          binders:
            kafka1:
              type: kafka
              environment:
                spring:
                  cloud:
                    stream:            
                      kafka:
                        binder:
                          brokers: 'kafka.${KAFKA_NAMESPACE}.svc.cluster.local:9092'                                        
                          producerProperties:
                            schema.registry.url: 'http://s-registry.${KAFKA_NAMESPACE}.svc.cluster.local:8081'
                            value.serializer: 'io.confluent.kafka.streams.serdes.avro.GenericAvroSerializer'
                            # value.serializer: 'io.confluent.kafka.serializers.KafkaAvroSerializer'
                            