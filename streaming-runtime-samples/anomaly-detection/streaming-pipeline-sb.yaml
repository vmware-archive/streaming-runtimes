apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Stream
metadata:
  name: card-authorizations-stream
spec:
  name: card-authorizations
  protocol: "kafka"
  storage:
    clusterStream: "card-authorizations-cluster-stream"
  dataSchemaContext:
    schema:
      namespace: com.tanzu.streaming.runtime.anomaly.detection
      name: AuthorizationAttempts
      fields:
        - name: card_number
          type: string
        - name: card_type
          type: string
        - name: card_expiry
          type: string
        - name: name
          type: string
        - name: event_time
          type: long_timestamp-millis
          metadata:
            from: timestamp
            readonly: true
          watermark: "`event_time` - INTERVAL '3' SECONDS"
    options:
      ddl.scan.startup.mode: earliest-offset
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Stream
metadata:
  name: possible-fraud-stream
spec:
  name: possible-fraud
  protocol: "kafka"
  storage:
    clusterStream: "possible-fraud-cluster-stream"
  dataSchemaContext:
    schema:
      namespace: com.tanzu.streaming.runtime.anomaly.detection
      name: PossibleFraud
      fields:
        - name: window_start
          type: long_timestamp-millis
        - name: window_end
          type: long_timestamp-millis
        - name: card_number
          type: string
        - name: authorization_attempts
          type: long
    options:
      ddl.key.fields: card_number
      ddl.value.format: "json"
      ddl.properties.allow.auto.create.topics: "true"
      ddl.scan.startup.mode: earliest-offset
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Stream
metadata:
  name: udf-output-possible-fraud-stream
spec:
  name: udf-output-possible-fraud
  protocol: "rabbitmq"
  # Binding refs a Secret with same name. The stream controller uses this binding to configure ClusterStream's auto-creation
  binding: "streaming-runtime-rabbitmq-secret"
  storage:
    clusterStream: "udf-output-possible-fraud-cluster-stream"
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Processor
metadata:
  name: possible-fraud-sql-aggregator
spec:
  type: FSQL
  inlineQuery:
    - "INSERT INTO [[STREAM:possible-fraud-stream]]  
        SELECT window_start, window_end, card_number, COUNT(*) AS authorization_attempts 
        FROM TABLE(TUMBLE(TABLE [[STREAM:card-authorizations-stream]], DESCRIPTOR(event_time), INTERVAL '5' SECONDS)) 
        GROUP BY window_start, window_end, card_number    
        HAVING COUNT(*) > 5"
  attributes:
    debugQuery: "SELECT * FROM PossibleFraud"
    debugExplain: "2"
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Processor
metadata:
  name: possible-fraud-processor
spec:
  type: SCW
  inputs:
    - name: "possible-fraud-stream"
  outputs:
    - name: "udf-output-possible-fraud-stream"
  template:
    spec:
      containers:
        - name: possible-fraud-analysis-udf
          image: ghcr.io/vmware-tanzu/streaming-runtimes/udf-uppercase-go:0.1
---
apiVersion: v1
kind: Secret
metadata:
  name: streaming-runtime-rabbitmq-secret
type: servicebinding.io/rabbitmq
stringData:
  type: rabbitmq
  provider: rabbitmq
  host: rabbitmq.streaming-runtime.svc.cluster.local
  port: "5672"
  # demo credentials
  username: guest
  password: guest
---
apiVersion: servicebinding.io/v1beta1
kind: ServiceBinding
metadata:
  name: streaming-runtime-rabbitmq
spec:
  service:
    apiVersion: v1
    kind: Secret
    name: streaming-runtime-rabbitmq-secret
  workload:
    apiVersion: apps/v1
    kind: Deployment
    name: srp-possible-fraud-processor
  env:
  - name: SPRING_RABBITMQ_PASSWORD
    key: password
  - name: SPRING_RABBITMQ_USERNAME
    key: username
  - name: RABBITMQ_HOST
    key: host
  - name: RABBITMQ_PORT
    key: port