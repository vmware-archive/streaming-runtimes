apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Stream
metadata:
  name: card-authorizations-stream
spec:
  name: card-authorizations
  protocol: "kafka"
  storage:
    clusterStream: "cluster-stream-card-authorizations"
  streamMode: [ "read" ]
  keys: [ "card_number" ]
  dataSchemaContext:
    schema:
      namespace: com.tanzu.streaming.runtime.anomaly.detection
      name: AuthorizationAttempts
      fields:
        - name: card_number
          type: string
        - name: card_type
          type: string
        - name: card_expiry
          type: string
        - name: name
          type: string
        - name: event_time
          type: long_timestamp-millis
          metadata:
            from: timestamp
            readonly: true
          watermark: "`event_time` - INTERVAL '3' SECONDS"
    options:
      ddl.scan.startup.mode: earliest-offset
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Stream
metadata:
  name: possible-fraud-stream
spec:
  name: possible-fraud
  protocol: "kafka"
  storage:
    clusterStream: "cluster-stream-possible-fraud"
  streamMode: [ "read", "write" ]
  keys: [ "card_number" ]
  dataSchemaContext:
    schema:
      namespace: com.tanzu.streaming.runtime.anomaly.detection
      name: PossibleFraud
      fields:
        - name: window_start
          type: long_timestamp-millis
        - name: window_end
          type: long_timestamp-millis
        - name: card_number
          type: string
        - name: authorization_attempts
          type: long
    options:
      ddl.key.fields: card_number
      ddl.value.format: "json"
      ddl.properties.allow.auto.create.topics: "true"
      ddl.scan.startup.mode: earliest-offset
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Stream
metadata:
  name: fraud-alert-stream
spec:
  name: fraud-alert
  keys: [ "card_id" ]
  streamMode: [ "write" ]
  protocol: "rabbitmq"
  storage:
    clusterStream: "cluster-stream-fraud-alert-stream"
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Processor
metadata:
  name: possible-fraud-detection
spec:
  type: FSQL
  inlineQuery:
    - "INSERT INTO [[STREAM:possible-fraud-stream]]  
        SELECT window_start, window_end, card_number, COUNT(*) AS authorization_attempts 
        FROM TABLE(TUMBLE(TABLE [[STREAM:card-authorizations-stream]], DESCRIPTOR(event_time), INTERVAL '5' SECONDS)) 
        GROUP BY window_start, window_end, card_number    
        HAVING COUNT(*) > 5"
  attributes:
    debugQuery: "SELECT * FROM PossibleFraud"
    debugExplain: "2"
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Processor
metadata:
  name: fraud-alert
spec:
  type: TWA
  inputs:
    - name: "possible-fraud-stream"
  outputs:
    - name: "fraud-alert-stream"
  template:
    spec:
      containers:
        - name: possible-fraud-analysis-udf
          image: ghcr.io/vmware-tanzu/streaming-runtimes/udf-uppercase-go:0.1

