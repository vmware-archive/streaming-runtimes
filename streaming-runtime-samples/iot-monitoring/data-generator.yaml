apiVersion: v1
kind: Service
metadata:
  name: iot-monitoring-data-generator
  labels:
    app: iot-monitoring-data-generator
    component: iot-monitoring-data-generator
    type: streaming-spike
    spring-deployment-id: iot-monitoring-data-generator
spec:
  type: LoadBalancer
  ports:
    - port: 80
      name: iot-monitoring-data-generator
      targetPort: 8080
      protocol: TCP
  selector:
    app: iot-monitoring-data-generator
    component: iot-monitoring-data-generator
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: iot-monitoring-data-generator
  labels:
    app: iot-monitoring-data-generator
    type: streaming-spike
    component: iot-monitoring-data-generator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: iot-monitoring-data-generator
  template:
    metadata:
      labels:
        app: iot-monitoring-data-generator
        component: iot-monitoring-data-generator
    spec:
      terminationGracePeriodSeconds: 15
      containers:
        - name: iot-monitoring-data-generator
          image: ghcr.io/logaritex/stream-data-generator:latest
          env:
          - name: KAFKA_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          volumeMounts:
            - name: config
              mountPath: /config
          ports:
            - containerPort: 8080
      volumes:
      - configMap:
          items:
          - key: application.yaml
            path: application.yaml
          name: data-generator-configmap
        name: config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: data-generator-configmap
data:
  application.yaml: |-
    stream:
      data:
        generator:
          terminateAfter: 200h

          streams:
            - streamName: iot-monitoring-stream
              destination:
                type: STREAM
                name: iot-monitoring-stream
              valueFormat: AVRO
              avroSchema: |-
                namespace: com.tanzu.streaming.runtime.iot.log
                type: record
                name: MonitoringStream
                fields:
                  - name: error_code
                    type: string
                    doc: "#{options.option 'C001_ABORTED','C002_ALREADY_EXISTS','C003_CANCELLED','C004_DEADLINE_EXCEEDED','C005_FAILED_PRECONDITION','C006_INTERNAL','C007_INVALID_ARGUMENT','C008_NOT_FOUND','C009_OUT_OF_RANGE','C010_PERMISSION_DENIED','C011_RESOURCE_EXHAUSTED','C012_UNAVAILABLE','C013_UNIMPLEMENTED','C014_UNKNOWN'}"
                  - name: ts
                    type:
                      type: long
                      logicalType: timestamp-millis
                    doc: "[[T(System).currentTimeMillis()]]"                
                  - name: type
                    type: string
                    doc: "#{options.option 'ERROR','DEBUG','INFO','WARN'}"
                  - name: application
                    type: string
                    doc: "#{app.name}"
                  - name: version
                    type: string
                    doc: "#{number.number_between '0','10'}.#{number.number_between '0','20'}.#{number.number_between '0','20'}#{options.option ' ',' ',' ',' ',' ',' ',' ','-SNAPSHOT'}"
                  - name: description
                    type: string
                    doc: "#{chuck_norris.fact}"

              batch:
                size: 100
                initialDelay: 10ms
                messageDelay: 10ms
                delay: 3s

    server:
      shutdown: graceful

    spring:  
      lifecycle:
        timeout-per-shutdown-phase: "100m"

      cloud:  
        stream:           
          default-binder: kafka
          bindings:
            iot-monitoring-stream:
              binder: kafka1
              destination: iot-monitoring
              contentType: application/*+avro
              producer:
                useNativeEncoding: true

          binders:
            kafka1:
              type: kafka
              environment:
                spring:
                  cloud:
                    stream:            
                      kafka:
                        binder:
                          brokers: 'kafka.${KAFKA_NAMESPACE}.svc.cluster.local:9092'                                        
                          producerProperties:
                            schema.registry.url: 'http://s-registry.${KAFKA_NAMESPACE}.svc.cluster.local:8081'
                            value.serializer: 'io.confluent.kafka.streams.serdes.avro.GenericAvroSerializer'
                            # value.serializer: 'io.confluent.kafka.serializers.KafkaAvroSerializer'
                            