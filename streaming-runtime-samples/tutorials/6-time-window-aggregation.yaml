#
# The (SRP) processor supports Tumbling Time-Window Aggregation. 
# The 'srp.window' attribute defines the window interval. 
# The processor collects inbound messages into time-window groups based on the event-time computed for every message.
# The event-time is computed from message's payload or header metadata. 
# The inbound Stream 'spec.dataSchemaContext.timeAttributes' defines which payload field (or header attribute) 
# to be used as an Event-Time. Furthermore the Watermark expression allows configuring out-of-orderness.
# When no event-time is configured the processor defaults to the less reliable process-time as event-time.
#
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Stream
metadata:
  name: data-in-stream
spec:
  name: data-in
  protocol: kafka
  dataSchemaContext:
    # Here the schema is used only with descriptive purpose! It is not used to validate the 
    # stream content. The FSQL samples show to to enforce Avro schemas and use schema registries.
    schema:
      namespace: sr.poc.online.gaming
      name: User
      fields:
        - name: id
          type: string
        - name: fullName
          type: string
        - name: team
          type: string
        - name: email
          type: string
        - name: score
          type: int
        - name: score_time
          type: long_timestamp-millis
    timeAttributes:
      # Data field to be used as an event-time. Generated watermark uses 2 sec. out-of-orderness.
      # Note: The Out-Of-Order events are not Late Events! The LateEvents are handled differently.
      - name: score_time
        watermark: "`score_time` - INTERVAL '2' SECOND"
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Processor
metadata:
  name: user-scores-processor
spec:
  inputs:
    - name: data-in-stream
  outputs:
    - name: user-scores-stream
  attributes:
    srp.window: 5s # Tumbling Time Window of 5 seconds.
    srp.window.idle.timeout: 60s # Allow partial release of idle time-windows.
    srp.lateEventMode: SIDE_CHANNEL # Send late events a side-channel stream. By default late events are discarded.
  template:
    spec:
      containers:
        - name: scores-by-user-javascript
          # The UDF implementation is in the './6-user-score-aggregation-js/aggregate.js'
          image: ghcr.io/vmware-tanzu/streaming-runtimes/user-score-js:latest
---
apiVersion: streaming.tanzu.vmware.com/v1alpha1
kind: Stream
metadata:
  name: user-scores-stream
spec:
  name: user-scores
  protocol: kafka
